#ifndef PROT_H
#define PROT_H

#include <QtCore>
#include <cstddef>
#include <vector>
#ifdef Q_OS_WIN
    #include <windows.h>
#elif defined(Q_OS_LINUX)
    typedef unsigned char UCHAR;
    typedef unsigned char BYTE;
#endif


static UCHAR CRC_Table_Hi[0x100]= {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

static UCHAR CRC_Table_Lo[0x100]= {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

struct FL_MODBUS_MESSAGE_SHORT
{
    UCHAR tx_id;
    UCHAR rx_id;
    UCHAR dist_addressMB; //0
    UCHAR FUNCT;
};

struct FL_MODBUS_MESSAGE
{
    union
    {
        struct {
            UCHAR tx_id;
            UCHAR rx_id;
            UCHAR dist_addressMB; //0
            UCHAR FUNCT;
        };
        FL_MODBUS_MESSAGE_SHORT message_short;
    };

    UCHAR sour_address; //0
    UCHAR dist_address; //0
    UCHAR command;
    UCHAR len;
};

struct MODBUS_MESSAGE
{
    UCHAR TX;
    UCHAR RX;
    UCHAR dist_addressMB;
    UCHAR data[248];
};


struct FL_MODBUS_PROT_ID_CMD_MESSAGE
{
    UCHAR protocol_version[2];
    UCHAR device_type;
    UCHAR validity;
    UCHAR config_version[2];
    UCHAR firmware_version[2];
    char phone[16];
};

struct FL_MODBUS_STATE_CMD_MESSAGE
{
    UCHAR len;
    UCHAR type;
    QByteArray data;
};

void CalculateCRC(const FL_MODBUS_MESSAGE& mm, const QByteArray& data, UCHAR crc[2]);

void CalculateCRC(QByteArray &msg);

#define PROT_VERSION				0x0204

#define PROT_MAX_SIZE				0x0100

#define PROT_FUNC_SYSTEM			0x6E



// request & reply command codes
#define PROT_REPLY_ERROR			0x00

#define PROT_RESET_CMD				0x01
#define PROT_RESET_OK				0x81

#define PROT_ID_CMD					0x02
#define PROT_ID_OK					0x82

#define PROT_STATE_REQ_CMD			0x03
#define PROT_STATE_REQ_OK			0x83

#define PROT_TIME_SET_CMD			0x04
#define PROT_TIME_SET_OK			0x84

#define PROT_TIME_REQ_CMD			0x05
#define PROT_TIME_REQ_OK			0x85

#define PROT_SYSLOG_WR_CMD			0x06
#define PROT_SYSLOG_WR_OK			0x86

#define PROT_CALL_CMD				0x07
#define PROT_CALL_OK				0x87

#define PROT_CLOCK_SYNC_CMD			0x08
#define PROT_CLOCK_SYNC_OK			0x88

#define PROT_BRIDGE_ON_CMD			0x0E
#define PROT_BRIDGE_ON_OK			0x8E

#define PROT_BRIDGE_OFF_CMD			0x0F
#define PROT_BRIDGE_OFF_OK			0x8F



#define PROT_CONF_START_CMD			0x11
#define PROT_CONF_START_OK			0x91

#define PROT_CONF_WR_CMD			0x12
#define PROT_CONF_WR_OK				0x92

#define PROT_CONF_RD_CMD			0x13
#define PROT_CONF_RD_OK				0x93

#define PROT_CONF_END_CMD			0x14
#define PROT_CONF_END_OK			0x94

#define PROT_FIRMWARE_START_CMD		0x19
#define PROT_FIRMWARE_START_OK		0x99

#define PROT_FIRMWARE_WR_CMD		0x1A
#define PROT_FIRMWARE_WR_OK			0x9A

#define PROT_FIRMWARE_END_CMD		0x1C
#define PROT_FIRMWARE_END_OK		0x9C




#define PROT_FILE_SRCH_INIT_CMD		0x21
#define PROT_FILE_SRCH_INIT_OK		0xA1

#define PROT_FILE_SRCH_CMD			0x22
#define PROT_FILE_SRCH_OK			0xA2

#define PROT_FILE_DEL_CMD			0x23
#define PROT_FILE_DEL_OK			0xA3

#define PROT_FILE_OPEN_WR_CMD		0x24
#define PROT_FILE_OPEN_WR_OK		0xA4

#define PROT_FILE_OPEN_RD_CMD		0x25
#define PROT_FILE_OPEN_RD_OK		0xA5

#define PROT_FILE_CLOSE_CMD			0x26
#define PROT_FILE_CLOSE_OK			0xA6

#define PROT_FILE_RESULT_CMD		0x27
#define PROT_FILE_RESULT_OK			0xA7

#define PROT_FILE_WR_CMD			0x28
#define PROT_FILE_WR_OK				0xA8

#define PROT_FILE_RD_CMD			0x29
#define PROT_FILE_RD_OK				0xA9

#define PROT_FILE_RENAME_CMD		0x2C
#define PROT_FILE_RENAME_OK			0xAC

#define PROT_FILE_FLASH_CLR_CMD		0x2F
#define PROT_FILE_FLASH_CLR_OK		0xAF




#define PROT_DMX_CONTROL_CMD		0x31
#define PROT_DMX_CONTROL_OK			0xB1

#define PROT_DMX_COMPLETE_CMD		0x32
#define PROT_DMX_COMPLETE_OK		0xB2

#define PROT_DMX_REC_CTRL_CMD		0x33
#define PROT_DMX_REC_CTRL_OK		0xB3

#define PROT_DMX_REC_CMPL_CMD		0x34
#define PROT_DMX_REC_CMPL_OK		0xB4

#define PROT_DMX_SET_CMD			0x35
#define PROT_DMX_SET_OK				0xB5

#define PROT_DMX_RELEASE_CMD		0x36
#define PROT_DMX_RELEASE_OK			0xB6

#define PROT_DMX_MODE_CMD			0x38
#define PROT_DMX_MODE_OK			0xB8

#define PROT_DMX_MCONTROL_CMD		0x39
#define PROT_DMX_MCONTROL_OK		0xB9




#define PROT_RELAY_SET_CMD			0x41
#define PROT_RELAY_SET_OK			0xC1

#define PROT_RELAY_REQ_CMD			0x42
#define PROT_RELAY_REQ_OK			0xC2

#define PROT_INPUT_REQ_CMD			0x43
#define PROT_INPUT_REQ_OK			0xC3

#define PROT_INPUT_STATE_CMD		0x44
#define PROT_INPUT_STATE_OK			0xC4

#define PROT_CNTR_REQ_CMD			0x48
#define PROT_CNTR_REQ_OK			0xC8




#define PROT_PROC_CONTROL_CMD		0x51
#define PROT_PROC_CONTROL_OK		0xD1

#define PROT_PROC_REQ_CMD			0x52
#define PROT_PROC_REQ_OK			0xD2

#define PROT_LOG_CONTROL_CMD		0x59
#define PROT_LOG_CONTROL_OK			0xD9




// error codes
#define PROT_ERR_UNKNOWN			0x00
#define PROT_ERR_HARDWARE			0x01
#define PROT_ERR_INVALID_CMD		0x02
#define PROT_ERR_INVALID_DATA		0x03
#define PROT_ERR_STATE				0x04
#define PROT_ERR_NO_FILE			0x05
#define PROT_ERR_END_OF_FILE		0x06
#define PROT_ERR_FILE_IO			0x07





// device types
#define PROT_DEVTYPE_CONTROL		0x01
#define PROT_DEVTYPE_CONTROL_RTC	0x02
#define PROT_DEVTYPE_REC_1DMX		0x11
#define PROT_DEVTYPE_REC_BT1DMX		0x12
#define PROT_DEVTYPE_RELAY_8O16I	0x21
#define PROT_DEVTYPE_RELAY_RTC2O	0x28
#define PROT_DEVTYPE_BRIDGE_GSM		0x41
#define PROT_DEVTYPE_BRIDGE_NET		0x42


// state elements types
#define PROT_STATTYPE_STRING		0x01
#define PROT_STATTYPE_TEMP			0x03
#define PROT_STATTYPE_SIGNAL		0x04
#define PROT_STATTYPE_PROCESS		0x05
#define PROT_STATTYPE_DMX_LEVEL		0x11
#define PROT_STATTYPE_BT_SLAVE		0x12
#define PROT_STATTYPE_CALL			0x41


// data types
#define PROT_DATATYPE_CONFIG		0x00
#define PROT_DATATYPE_LOG			0x01
#define PROT_DATATYPE_DMX_PROG		0x02
#define PROT_DATATYPE_DMX_REC		0x03
#define PROT_DATATYPE_REF			0x04

#define PROT_DATA_SIGNATURE			0x5FA0



// file search flags
#define PROT_FILE_SIZE_MASK			0x07
#define PROT_FILE_SIZE_LT			0x01
#define PROT_FILE_SIZE_GT			0x02
#define PROT_FILE_SIZE_EQ			0x04
#define PROT_FILE_SIZE_LE			0x05
#define PROT_FILE_SIZE_GE			0x06

#define PROT_FILE_TIME_MASK			(0x07<<3)
#define PROT_FILE_TIME_LT			(0x01<<3)
#define PROT_FILE_TIME_GT			(0x02<<3)
#define PROT_FILE_TIME_EQ			(0x04<<3)
#define PROT_FILE_TIME_LE			(0x05<<3)
#define PROT_FILE_TIME_GE			(0x06<<3)

#define PROT_FILE_NAME_EQ			0x80




// DMX program mode
#define PROT_DMXMODE_STOP			0x00
#define PROT_DMXMODE_ONCE			0x01
#define PROT_DMXMODE_CYCLE			0x02
#define PROT_DMXMODE_WAIT			0x04
#define PROT_DMXMODE_MULTI			0x08
#define PROT_DMXMODE_LEVEL_EQ		0x10
#define PROT_DMXMODE_LEVEL_LE		0x20
#define PROT_DMXMODE_LEVEL_GE		0x00
#define PROT_DMXMODE_LEVEL_REMOVE	0x40
#define PROT_DMXMODE_LEVEL_PRIOR	0x80



// DMX program record types
#define PROT_DMXPROG_SET			0x01
#define PROT_DMXPROG_PAUSE			0x02
#define PROT_DMXPROG_GRADIENT		0x03
#define PROT_DMXPROG_END			0x7F


#define PROT_DMXREC_STOP			0x00
#define PROT_DMXREC_START			0x01
#define PROT_DMXREC_WAIT			0x02
#define PROT_DMXREC_REQ				0xFF


#endif // PROT_H
